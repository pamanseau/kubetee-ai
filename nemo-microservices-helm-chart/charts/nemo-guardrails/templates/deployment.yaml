apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "helm.fullname" . }}
  labels:
    {{- include "helm.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "helm.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "helm.labels" . | nindent 8 }}
        {{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      imagePullSecrets:
        {{ include "nemo-common.imagepullsecrets" . | nindent 8 | trim }}
      serviceAccountName: {{ include "helm.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        {{- if .Values.postgresql.enabled }}
        - name: wait-for-postgres
          image: {{ include "nemo-common.postgresql.wait-image" . }}
          command:
            - 'sh'
            - '-c'
            - 'for i in $(seq 1 50); do echo "Waiting for PostgreSQL to start (attempt $i of 50)"; nc -z {{ include "nemo-common.postgresql.host" . }} {{ include "nemo-common.postgresql.port" . }} && exit 0; sleep 5; done; echo "Failed to connect after 50 attempts."; exit 1'
        {{- end }}
        - name: guardrails-db-migration
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          workingDir: /app/services/guardrails
          env:
            {{- if or .Values.postgresql.enabled .Values.externalDatabase.host .Values.externalDatabase.uriSecret.name }}
            {{ include "nemo-common.postgresql.password" . | nindent 12 | trim }}
            - name: POSTGRES_URI
              {{ include "nemo-common.postgresql.uri" . | nindent 14 | trim }}
            {{- end }}
            - name: PYTHONPATH
              value: "/app/services/guardrails"
            {{ include "nemo-common.env" . | nindent 12 | trim }}
          command: ["/app/.venv/bin/alembic"]
          args: ["upgrade", "head"]
      containers:
        - name: {{ .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: {{ include "nemo-common.mainimage" . | quote }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.service.port }}
              protocol: TCP
          livenessProbe:
            {{- toYaml .Values.livenessProbe | nindent 12 }}
          readinessProbe:
            {{- toYaml .Values.readinessProbe | nindent 12 }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if .Values.configStore.nfs.enabled }}
          volumeMounts:
            - name: config-store
              mountPath: {{ .Values.configStore.nfs.mountPath }}
          {{- end }}
          env:
            {{ include "nemo-common.env" . | nindent 12 | trim }}
            {{- if or .Values.postgresql.enabled .Values.externalDatabase.host .Values.externalDatabase.uriSecret.name }}
            {{ include "nemo-common.postgresql.password" . | nindent 12 | trim }}
            - name: DB_URI
              {{ include "nemo-common.postgresql.uri" . | nindent 14 | trim }}
            {{- end }}
            {{- if .Values.external.entityStore.endpoint }}
            - name: ENTITY_STORE_URL
              value: "{{ .Values.external.entityStore.endpoint }}"
            {{- end }}
            - name: OTEL_EXPORTER_OTLP_ENDPOINT
              value: "http://$(GUARDRAILS_HOST):4317" # sends to gRPC receiver on port 4317
            - name: OTEL_RESOURCE_ATTRIBUTES
              value: "deployment.environment=dev"
            - name: OTEL_SERVICE_NAME
              value: "nemo-guardrails"
            - name: OTEL_PYTHON_EXCLUDED_URLS
              value: "health"
            {{- if .Values.guardrails.nvcfAPIKeySecretName }}
            - name: NVIDIA_API_KEY
              valueFrom:
                secretKeyRef:
                  name: {{ .Values.guardrails.nvcfAPIKeySecretName }}
                  key: NVIDIA_API_KEY
              {{- end }}
      {{- if .Values.configStore.nfs.enabled }}
      volumes:
        - name: config-store
          persistentVolumeClaim:
            claimName: config-store-nfs-pvc
      {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
